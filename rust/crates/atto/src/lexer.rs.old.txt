use crate::value::Atom;
use lexgen::lexer;

#[derive(Clone, Debug, PartialEq, Eq)]
enum Token {
    Nil,
    Colon,
    WhiteSpace,
    Comment,
    Bare(Atom),
    Quote,
}

#[derive(Clone, Debug, Default, PartialEq, Eq)]
struct LexerState {
    guard: Option<String>,
}

lexer! {
    Lexer(LexerState) -> Token;

    // character set generated by create_character_set
    let valid = [ '\u{21}'-'\u{7e}' '\u{a1}'-'\u{377}' '\u{37a}'-'\u{37f}' '\u{384}'-'\u{38a}' '\u{38c}' '\u{38e}'-'\u{3a1}' '\u{3a3}'-'\u{52f}' '\u{531}'-'\u{556}' '\u{559}'-'\u{58a}' '\u{58d}'-'\u{58f}' '\u{591}'-'\u{5c7}' '\u{5d0}'-'\u{5ea}' '\u{5ef}'-'\u{5f4}' '\u{600}'-'\u{70d}' '\u{70f}'-'\u{74a}' '\u{74d}'-'\u{7b1}' '\u{7c0}'-'\u{7fa}' '\u{7fd}'-'\u{82d}' '\u{830}'-'\u{83e}' '\u{840}'-'\u{85b}' '\u{85e}' '\u{860}'-'\u{86a}' '\u{870}'-'\u{88e}' '\u{890}'-'\u{891}' '\u{898}'-'\u{983}' '\u{985}'-'\u{98c}' '\u{98f}'-'\u{990}' '\u{993}'-'\u{9a8}' '\u{9aa}'-'\u{9b0}' '\u{9b2}' '\u{9b6}'-'\u{9b9}' '\u{9bc}'-'\u{9c4}' '\u{9c7}'-'\u{9c8}' '\u{9cb}'-'\u{9ce}' '\u{9d7}' '\u{9dc}'-'\u{9dd}' '\u{9df}'-'\u{9e3}' '\u{9e6}'-'\u{9fe}' '\u{a01}'-'\u{a03}' '\u{a05}'-'\u{a0a}' '\u{a0f}'-'\u{a10}' '\u{a13}'-'\u{a28}' '\u{a2a}'-'\u{a30}' '\u{a32}'-'\u{a33}' '\u{a35}'-'\u{a36}' '\u{a38}'-'\u{a39}' '\u{a3c}' '\u{a3e}'-'\u{a42}' '\u{a47}'-'\u{a48}' '\u{a4b}'-'\u{a4d}' '\u{a51}' '\u{a59}'-'\u{a5c}' '\u{a5e}' '\u{a66}'-'\u{a76}' '\u{a81}'-'\u{a83}' '\u{a85}'-'\u{a8d}' '\u{a8f}'-'\u{a91}' '\u{a93}'-'\u{aa8}' '\u{aaa}'-'\u{ab0}' '\u{ab2}'-'\u{ab3}' '\u{ab5}'-'\u{ab9}' '\u{abc}'-'\u{ac5}' '\u{ac7}'-'\u{ac9}' '\u{acb}'-'\u{acd}' '\u{ad0}' '\u{ae0}'-'\u{ae3}' '\u{ae6}'-'\u{af1}' '\u{af9}'-'\u{aff}' '\u{b01}'-'\u{b03}' '\u{b05}'-'\u{b0c}' '\u{b0f}'-'\u{b10}' '\u{b13}'-'\u{b28}' '\u{b2a}'-'\u{b30}' '\u{b32}'-'\u{b33}' '\u{b35}'-'\u{b39}' '\u{b3c}'-'\u{b44}' '\u{b47}'-'\u{b48}' '\u{b4b}'-'\u{b4d}' '\u{b55}'-'\u{b57}' '\u{b5c}'-'\u{b5d}' '\u{b5f}'-'\u{b63}' '\u{b66}'-'\u{b77}' '\u{b82}'-'\u{b83}' '\u{b85}'-'\u{b8a}' '\u{b8e}'-'\u{b90}' '\u{b92}'-'\u{b95}' '\u{b99}'-'\u{b9a}' '\u{b9c}' '\u{b9e}'-'\u{b9f}' '\u{ba3}'-'\u{ba4}' '\u{ba8}'-'\u{baa}' '\u{bae}'-'\u{bb9}' '\u{bbe}'-'\u{bc2}' '\u{bc6}'-'\u{bc8}' '\u{bca}'-'\u{bcd}' '\u{bd0}' '\u{bd7}' '\u{be6}'-'\u{bfa}' '\u{c00}'-'\u{c0c}' '\u{c0e}'-'\u{c10}' '\u{c12}'-'\u{c28}' '\u{c2a}'-'\u{c39}' '\u{c3c}'-'\u{c44}' '\u{c46}'-'\u{c48}' '\u{c4a}'-'\u{c4d}' '\u{c55}'-'\u{c56}' '\u{c58}'-'\u{c5a}' '\u{c5d}' '\u{c60}'-'\u{c63}' '\u{c66}'-'\u{c6f}' '\u{c77}'-'\u{c8c}' '\u{c8e}'-'\u{c90}' '\u{c92}'-'\u{ca8}' '\u{caa}'-'\u{cb3}' '\u{cb5}'-'\u{cb9}' '\u{cbc}'-'\u{cc4}' '\u{cc6}'-'\u{cc8}' '\u{cca}'-'\u{ccd}' '\u{cd5}'-'\u{cd6}' '\u{cdd}'-'\u{cde}' '\u{ce0}'-'\u{ce3}' '\u{ce6}'-'\u{cef}' '\u{cf1}'-'\u{cf3}' '\u{d00}'-'\u{d0c}' '\u{d0e}'-'\u{d10}' '\u{d12}'-'\u{d44}' '\u{d46}'-'\u{d48}' '\u{d4a}'-'\u{d4f}' '\u{d54}'-'\u{d63}' '\u{d66}'-'\u{d7f}' '\u{d81}'-'\u{d83}' '\u{d85}'-'\u{d96}' '\u{d9a}'-'\u{db1}' '\u{db3}'-'\u{dbb}' '\u{dbd}' '\u{dc0}'-'\u{dc6}' '\u{dca}' '\u{dcf}'-'\u{dd4}' '\u{dd6}' '\u{dd8}'-'\u{ddf}' '\u{de6}'-'\u{def}' '\u{df2}'-'\u{df4}' '\u{e01}'-'\u{e3a}' '\u{e3f}'-'\u{e5b}' '\u{e81}'-'\u{e82}' '\u{e84}' '\u{e86}'-'\u{e8a}' '\u{e8c}'-'\u{ea3}' '\u{ea5}' '\u{ea7}'-'\u{ebd}' '\u{ec0}'-'\u{ec4}' '\u{ec6}' '\u{ec8}'-'\u{ece}' '\u{ed0}'-'\u{ed9}' '\u{edc}'-'\u{edf}' '\u{f00}'-'\u{f47}' '\u{f49}'-'\u{f6c}' '\u{f71}'-'\u{f97}' '\u{f99}'-'\u{fbc}' '\u{fbe}'-'\u{fcc}' '\u{fce}'-'\u{fda}' '\u{1000}'-'\u{10c5}' '\u{10c7}' '\u{10cd}' '\u{10d0}'-'\u{1248}' '\u{124a}'-'\u{124d}' '\u{1250}'-'\u{1256}' '\u{1258}' '\u{125a}'-'\u{125d}' '\u{1260}'-'\u{1288}' '\u{128a}'-'\u{128d}' '\u{1290}'-'\u{12b0}' '\u{12b2}'-'\u{12b5}' '\u{12b8}'-'\u{12be}' '\u{12c0}' '\u{12c2}'-'\u{12c5}' '\u{12c8}'-'\u{12d6}' '\u{12d8}'-'\u{1310}' '\u{1312}'-'\u{1315}' '\u{1318}'-'\u{135a}' '\u{135d}'-'\u{137c}' '\u{1380}'-'\u{1399}' '\u{13a0}'-'\u{13f5}' '\u{13f8}'-'\u{13fd}' '\u{1400}'-'\u{167f}' '\u{1681}'-'\u{169c}' '\u{16a0}'-'\u{16f8}' '\u{1700}'-'\u{1715}' '\u{171f}'-'\u{1736}' '\u{1740}'-'\u{1753}' '\u{1760}'-'\u{176c}' '\u{176e}'-'\u{1770}' '\u{1772}'-'\u{1773}' '\u{1780}'-'\u{17dd}' '\u{17e0}'-'\u{17e9}' '\u{17f0}'-'\u{17f9}' '\u{1800}'-'\u{1819}' '\u{1820}'-'\u{1878}' '\u{1880}'-'\u{18aa}' '\u{18b0}'-'\u{18f5}' '\u{1900}'-'\u{191e}' '\u{1920}'-'\u{192b}' '\u{1930}'-'\u{193b}' '\u{1940}' '\u{1944}'-'\u{196d}' '\u{1970}'-'\u{1974}' '\u{1980}'-'\u{19ab}' '\u{19b0}'-'\u{19c9}' '\u{19d0}'-'\u{19da}' '\u{19de}'-'\u{1a1b}' '\u{1a1e}'-'\u{1a5e}' '\u{1a60}'-'\u{1a7c}' '\u{1a7f}'-'\u{1a89}' '\u{1a90}'-'\u{1a99}' '\u{1aa0}'-'\u{1aad}' '\u{1ab0}'-'\u{1ace}' '\u{1b00}'-'\u{1b4c}' '\u{1b50}'-'\u{1b7e}' '\u{1b80}'-'\u{1bf3}' '\u{1bfc}'-'\u{1c37}' '\u{1c3b}'-'\u{1c49}' '\u{1c4d}'-'\u{1c88}' '\u{1c90}'-'\u{1cba}' '\u{1cbd}'-'\u{1cc7}' '\u{1cd0}'-'\u{1cfa}' '\u{1d00}'-'\u{1f15}' '\u{1f18}'-'\u{1f1d}' '\u{1f20}'-'\u{1f45}' '\u{1f48}'-'\u{1f4d}' '\u{1f50}'-'\u{1f57}' '\u{1f59}' '\u{1f5b}' '\u{1f5d}' '\u{1f5f}'-'\u{1f7d}' '\u{1f80}'-'\u{1fb4}' '\u{1fb6}'-'\u{1fc4}' '\u{1fc6}'-'\u{1fd3}' '\u{1fd6}'-'\u{1fdb}' '\u{1fdd}'-'\u{1fef}' '\u{1ff2}'-'\u{1ff4}' '\u{1ff6}'-'\u{1ffe}' '\u{200b}'-'\u{2027}' '\u{202a}'-'\u{202e}' '\u{2030}'-'\u{205e}' '\u{2060}'-'\u{2064}' '\u{2066}'-'\u{2071}' '\u{2074}'-'\u{208e}' '\u{2090}'-'\u{209c}' '\u{20a0}'-'\u{20c0}' '\u{20d0}'-'\u{20f0}' '\u{2100}'-'\u{218b}' '\u{2190}'-'\u{2426}' '\u{2440}'-'\u{244a}' '\u{2460}'-'\u{2b73}' '\u{2b76}'-'\u{2b95}' '\u{2b97}'-'\u{2cf3}' '\u{2cf9}'-'\u{2d25}' '\u{2d27}' '\u{2d2d}' '\u{2d30}'-'\u{2d67}' '\u{2d6f}'-'\u{2d70}' '\u{2d7f}'-'\u{2d96}' '\u{2da0}'-'\u{2da6}' '\u{2da8}'-'\u{2dae}' '\u{2db0}'-'\u{2db6}' '\u{2db8}'-'\u{2dbe}' '\u{2dc0}'-'\u{2dc6}' '\u{2dc8}'-'\u{2dce}' '\u{2dd0}'-'\u{2dd6}' '\u{2dd8}'-'\u{2dde}' '\u{2de0}'-'\u{2e5d}' '\u{2e80}'-'\u{2e99}' '\u{2e9b}'-'\u{2ef3}' '\u{2f00}'-'\u{2fd5}' '\u{2ff0}'-'\u{2ffb}' '\u{3001}'-'\u{303f}' '\u{3041}'-'\u{3096}' '\u{3099}'-'\u{30ff}' '\u{3105}'-'\u{312f}' '\u{3131}'-'\u{318e}' '\u{3190}'-'\u{31e3}' '\u{31f0}'-'\u{321e}' '\u{3220}'-'\u{a48c}' '\u{a490}'-'\u{a4c6}' '\u{a4d0}'-'\u{a62b}' '\u{a640}'-'\u{a6f7}' '\u{a700}'-'\u{a7ca}' '\u{a7d0}'-'\u{a7d1}' '\u{a7d3}' '\u{a7d5}'-'\u{a7d9}' '\u{a7f2}'-'\u{a82c}' '\u{a830}'-'\u{a839}' '\u{a840}'-'\u{a877}' '\u{a880}'-'\u{a8c5}' '\u{a8ce}'-'\u{a8d9}' '\u{a8e0}'-'\u{a953}' '\u{a95f}'-'\u{a97c}' '\u{a980}'-'\u{a9cd}' '\u{a9cf}'-'\u{a9d9}' '\u{a9de}'-'\u{a9fe}' '\u{aa00}'-'\u{aa36}' '\u{aa40}'-'\u{aa4d}' '\u{aa50}'-'\u{aa59}' '\u{aa5c}'-'\u{aac2}' '\u{aadb}'-'\u{aaf6}' '\u{ab01}'-'\u{ab06}' '\u{ab09}'-'\u{ab0e}' '\u{ab11}'-'\u{ab16}' '\u{ab20}'-'\u{ab26}' '\u{ab28}'-'\u{ab2e}' '\u{ab30}'-'\u{ab6b}' '\u{ab70}'-'\u{abed}' '\u{abf0}'-'\u{abf9}' '\u{ac00}'-'\u{d7a3}' '\u{d7b0}'-'\u{d7c6}' '\u{d7cb}'-'\u{d7fb}' '\u{f900}'-'\u{fa6d}' '\u{fa70}'-'\u{fad9}' '\u{fb00}'-'\u{fb06}' '\u{fb13}'-'\u{fb17}' '\u{fb1d}'-'\u{fb36}' '\u{fb38}'-'\u{fb3c}' '\u{fb3e}' '\u{fb40}'-'\u{fb41}' '\u{fb43}'-'\u{fb44}' '\u{fb46}'-'\u{fbc2}' '\u{fbd3}'-'\u{fd8f}' '\u{fd92}'-'\u{fdc7}' '\u{fdcf}' '\u{fdf0}'-'\u{fe19}' '\u{fe20}'-'\u{fe52}' '\u{fe54}'-'\u{fe66}' '\u{fe68}'-'\u{fe6b}' '\u{fe70}'-'\u{fe74}' '\u{fe76}'-'\u{fefc}' '\u{feff}' '\u{ff01}'-'\u{ffbe}' '\u{ffc2}'-'\u{ffc7}' '\u{ffca}'-'\u{ffcf}' '\u{ffd2}'-'\u{ffd7}' '\u{ffda}'-'\u{ffdc}' '\u{ffe0}'-'\u{ffe6}' '\u{ffe8}'-'\u{ffee}' '\u{fff9}'-'\u{fffd}' '\u{10000}'-'\u{1000b}' '\u{1000d}'-'\u{10026}' '\u{10028}'-'\u{1003a}' '\u{1003c}'-'\u{1003d}' '\u{1003f}'-'\u{1004d}' '\u{10050}'-'\u{1005d}' '\u{10080}'-'\u{100fa}' '\u{10100}'-'\u{10102}' '\u{10107}'-'\u{10133}' '\u{10137}'-'\u{1018e}' '\u{10190}'-'\u{1019c}' '\u{101a0}' '\u{101d0}'-'\u{101fd}' '\u{10280}'-'\u{1029c}' '\u{102a0}'-'\u{102d0}' '\u{102e0}'-'\u{102fb}' '\u{10300}'-'\u{10323}' '\u{1032d}'-'\u{1034a}' '\u{10350}'-'\u{1037a}' '\u{10380}'-'\u{1039d}' '\u{1039f}'-'\u{103c3}' '\u{103c8}'-'\u{103d5}' '\u{10400}'-'\u{1049d}' '\u{104a0}'-'\u{104a9}' '\u{104b0}'-'\u{104d3}' '\u{104d8}'-'\u{104fb}' '\u{10500}'-'\u{10527}' '\u{10530}'-'\u{10563}' '\u{1056f}'-'\u{1057a}' '\u{1057c}'-'\u{1058a}' '\u{1058c}'-'\u{10592}' '\u{10594}'-'\u{10595}' '\u{10597}'-'\u{105a1}' '\u{105a3}'-'\u{105b1}' '\u{105b3}'-'\u{105b9}' '\u{105bb}'-'\u{105bc}' '\u{10600}'-'\u{10736}' '\u{10740}'-'\u{10755}' '\u{10760}'-'\u{10767}' '\u{10780}'-'\u{10785}' '\u{10787}'-'\u{107b0}' '\u{107b2}'-'\u{107ba}' '\u{10800}'-'\u{10805}' '\u{10808}' '\u{1080a}'-'\u{10835}' '\u{10837}'-'\u{10838}' '\u{1083c}' '\u{1083f}'-'\u{10855}' '\u{10857}'-'\u{1089e}' '\u{108a7}'-'\u{108af}' '\u{108e0}'-'\u{108f2}' '\u{108f4}'-'\u{108f5}' '\u{108fb}'-'\u{1091b}' '\u{1091f}'-'\u{10939}' '\u{1093f}' '\u{10980}'-'\u{109b7}' '\u{109bc}'-'\u{109cf}' '\u{109d2}'-'\u{10a03}' '\u{10a05}'-'\u{10a06}' '\u{10a0c}'-'\u{10a13}' '\u{10a15}'-'\u{10a17}' '\u{10a19}'-'\u{10a35}' '\u{10a38}'-'\u{10a3a}' '\u{10a3f}'-'\u{10a48}' '\u{10a50}'-'\u{10a58}' '\u{10a60}'-'\u{10a9f}' '\u{10ac0}'-'\u{10ae6}' '\u{10aeb}'-'\u{10af6}' '\u{10b00}'-'\u{10b35}' '\u{10b39}'-'\u{10b55}' '\u{10b58}'-'\u{10b72}' '\u{10b78}'-'\u{10b91}' '\u{10b99}'-'\u{10b9c}' '\u{10ba9}'-'\u{10baf}' '\u{10c00}'-'\u{10c48}' '\u{10c80}'-'\u{10cb2}' '\u{10cc0}'-'\u{10cf2}' '\u{10cfa}'-'\u{10d27}' '\u{10d30}'-'\u{10d39}' '\u{10e60}'-'\u{10e7e}' '\u{10e80}'-'\u{10ea9}' '\u{10eab}'-'\u{10ead}' '\u{10eb0}'-'\u{10eb1}' '\u{10efd}'-'\u{10f27}' '\u{10f30}'-'\u{10f59}' '\u{10f70}'-'\u{10f89}' '\u{10fb0}'-'\u{10fcb}' '\u{10fe0}'-'\u{10ff6}' '\u{11000}'-'\u{1104d}' '\u{11052}'-'\u{11075}' '\u{1107f}'-'\u{110c2}' '\u{110cd}' '\u{110d0}'-'\u{110e8}' '\u{110f0}'-'\u{110f9}' '\u{11100}'-'\u{11134}' '\u{11136}'-'\u{11147}' '\u{11150}'-'\u{11176}' '\u{11180}'-'\u{111df}' '\u{111e1}'-'\u{111f4}' '\u{11200}'-'\u{11211}' '\u{11213}'-'\u{11241}' '\u{11280}'-'\u{11286}' '\u{11288}' '\u{1128a}'-'\u{1128d}' '\u{1128f}'-'\u{1129d}' '\u{1129f}'-'\u{112a9}' '\u{112b0}'-'\u{112ea}' '\u{112f0}'-'\u{112f9}' '\u{11300}'-'\u{11303}' '\u{11305}'-'\u{1130c}' '\u{1130f}'-'\u{11310}' '\u{11313}'-'\u{11328}' '\u{1132a}'-'\u{11330}' '\u{11332}'-'\u{11333}' '\u{11335}'-'\u{11339}' '\u{1133b}'-'\u{11344}' '\u{11347}'-'\u{11348}' '\u{1134b}'-'\u{1134d}' '\u{11350}' '\u{11357}' '\u{1135d}'-'\u{11363}' '\u{11366}'-'\u{1136c}' '\u{11370}'-'\u{11374}' '\u{11400}'-'\u{1145b}' '\u{1145d}'-'\u{11461}' '\u{11480}'-'\u{114c7}' '\u{114d0}'-'\u{114d9}' '\u{11580}'-'\u{115b5}' '\u{115b8}'-'\u{115dd}' '\u{11600}'-'\u{11644}' '\u{11650}'-'\u{11659}' '\u{11660}'-'\u{1166c}' '\u{11680}'-'\u{116b9}' '\u{116c0}'-'\u{116c9}' '\u{11700}'-'\u{1171a}' '\u{1171d}'-'\u{1172b}' '\u{11730}'-'\u{11746}' '\u{11800}'-'\u{1183b}' '\u{118a0}'-'\u{118f2}' '\u{118ff}'-'\u{11906}' '\u{11909}' '\u{1190c}'-'\u{11913}' '\u{11915}'-'\u{11916}' '\u{11918}'-'\u{11935}' '\u{11937}'-'\u{11938}' '\u{1193b}'-'\u{11946}' '\u{11950}'-'\u{11959}' '\u{119a0}'-'\u{119a7}' '\u{119aa}'-'\u{119d7}' '\u{119da}'-'\u{119e4}' '\u{11a00}'-'\u{11a47}' '\u{11a50}'-'\u{11aa2}' '\u{11ab0}'-'\u{11af8}' '\u{11b00}'-'\u{11b09}' '\u{11c00}'-'\u{11c08}' '\u{11c0a}'-'\u{11c36}' '\u{11c38}'-'\u{11c45}' '\u{11c50}'-'\u{11c6c}' '\u{11c70}'-'\u{11c8f}' '\u{11c92}'-'\u{11ca7}' '\u{11ca9}'-'\u{11cb6}' '\u{11d00}'-'\u{11d06}' '\u{11d08}'-'\u{11d09}' '\u{11d0b}'-'\u{11d36}' '\u{11d3a}' '\u{11d3c}'-'\u{11d3d}' '\u{11d3f}'-'\u{11d47}' '\u{11d50}'-'\u{11d59}' '\u{11d60}'-'\u{11d65}' '\u{11d67}'-'\u{11d68}' '\u{11d6a}'-'\u{11d8e}' '\u{11d90}'-'\u{11d91}' '\u{11d93}'-'\u{11d98}' '\u{11da0}'-'\u{11da9}' '\u{11ee0}'-'\u{11ef8}' '\u{11f00}'-'\u{11f10}' '\u{11f12}'-'\u{11f3a}' '\u{11f3e}'-'\u{11f59}' '\u{11fb0}' '\u{11fc0}'-'\u{11ff1}' '\u{11fff}'-'\u{12399}' '\u{12400}'-'\u{1246e}' '\u{12470}'-'\u{12474}' '\u{12480}'-'\u{12543}' '\u{12f90}'-'\u{12ff2}' '\u{13000}'-'\u{13455}' '\u{14400}'-'\u{14646}' '\u{16800}'-'\u{16a38}' '\u{16a40}'-'\u{16a5e}' '\u{16a60}'-'\u{16a69}' '\u{16a6e}'-'\u{16abe}' '\u{16ac0}'-'\u{16ac9}' '\u{16ad0}'-'\u{16aed}' '\u{16af0}'-'\u{16af5}' '\u{16b00}'-'\u{16b45}' '\u{16b50}'-'\u{16b59}' '\u{16b5b}'-'\u{16b61}' '\u{16b63}'-'\u{16b77}' '\u{16b7d}'-'\u{16b8f}' '\u{16e40}'-'\u{16e9a}' '\u{16f00}'-'\u{16f4a}' '\u{16f4f}'-'\u{16f87}' '\u{16f8f}'-'\u{16f9f}' '\u{16fe0}'-'\u{16fe4}' '\u{16ff0}'-'\u{16ff1}' '\u{17000}'-'\u{187f7}' '\u{18800}'-'\u{18cd5}' '\u{18d00}'-'\u{18d08}' '\u{1aff0}'-'\u{1aff3}' '\u{1aff5}'-'\u{1affb}' '\u{1affd}'-'\u{1affe}' '\u{1b000}'-'\u{1b122}' '\u{1b132}' '\u{1b150}'-'\u{1b152}' '\u{1b155}' '\u{1b164}'-'\u{1b167}' '\u{1b170}'-'\u{1b2fb}' '\u{1bc00}'-'\u{1bc6a}' '\u{1bc70}'-'\u{1bc7c}' '\u{1bc80}'-'\u{1bc88}' '\u{1bc90}'-'\u{1bc99}' '\u{1bc9c}'-'\u{1bca3}' '\u{1cf00}'-'\u{1cf2d}' '\u{1cf30}'-'\u{1cf46}' '\u{1cf50}'-'\u{1cfc3}' '\u{1d000}'-'\u{1d0f5}' '\u{1d100}'-'\u{1d126}' '\u{1d129}'-'\u{1d1ea}' '\u{1d200}'-'\u{1d245}' '\u{1d2c0}'-'\u{1d2d3}' '\u{1d2e0}'-'\u{1d2f3}' '\u{1d300}'-'\u{1d356}' '\u{1d360}'-'\u{1d378}' '\u{1d400}'-'\u{1d454}' '\u{1d456}'-'\u{1d49c}' '\u{1d49e}'-'\u{1d49f}' '\u{1d4a2}' '\u{1d4a5}'-'\u{1d4a6}' '\u{1d4a9}'-'\u{1d4ac}' '\u{1d4ae}'-'\u{1d4b9}' '\u{1d4bb}' '\u{1d4bd}'-'\u{1d4c3}' '\u{1d4c5}'-'\u{1d505}' '\u{1d507}'-'\u{1d50a}' '\u{1d50d}'-'\u{1d514}' '\u{1d516}'-'\u{1d51c}' '\u{1d51e}'-'\u{1d539}' '\u{1d53b}'-'\u{1d53e}' '\u{1d540}'-'\u{1d544}' '\u{1d546}' '\u{1d54a}'-'\u{1d550}' '\u{1d552}'-'\u{1d6a5}' '\u{1d6a8}'-'\u{1d7cb}' '\u{1d7ce}'-'\u{1da8b}' '\u{1da9b}'-'\u{1da9f}' '\u{1daa1}'-'\u{1daaf}' '\u{1df00}'-'\u{1df1e}' '\u{1df25}'-'\u{1df2a}' '\u{1e000}'-'\u{1e006}' '\u{1e008}'-'\u{1e018}' '\u{1e01b}'-'\u{1e021}' '\u{1e023}'-'\u{1e024}' '\u{1e026}'-'\u{1e02a}' '\u{1e030}'-'\u{1e06d}' '\u{1e08f}' '\u{1e100}'-'\u{1e12c}' '\u{1e130}'-'\u{1e13d}' '\u{1e140}'-'\u{1e149}' '\u{1e14e}'-'\u{1e14f}' '\u{1e290}'-'\u{1e2ae}' '\u{1e2c0}'-'\u{1e2f9}' '\u{1e2ff}' '\u{1e4d0}'-'\u{1e4f9}' '\u{1e7e0}'-'\u{1e7e6}' '\u{1e7e8}'-'\u{1e7eb}' '\u{1e7ed}'-'\u{1e7ee}' '\u{1e7f0}'-'\u{1e7fe}' '\u{1e800}'-'\u{1e8c4}' '\u{1e8c7}'-'\u{1e8d6}' '\u{1e900}'-'\u{1e94b}' '\u{1e950}'-'\u{1e959}' '\u{1e95e}'-'\u{1e95f}' '\u{1ec71}'-'\u{1ecb4}' '\u{1ed01}'-'\u{1ed3d}' '\u{1ee00}'-'\u{1ee03}' '\u{1ee05}'-'\u{1ee1f}' '\u{1ee21}'-'\u{1ee22}' '\u{1ee24}' '\u{1ee27}' '\u{1ee29}'-'\u{1ee32}' '\u{1ee34}'-'\u{1ee37}' '\u{1ee39}' '\u{1ee3b}' '\u{1ee42}' '\u{1ee47}' '\u{1ee49}' '\u{1ee4b}' '\u{1ee4d}'-'\u{1ee4f}' '\u{1ee51}'-'\u{1ee52}' '\u{1ee54}' '\u{1ee57}' '\u{1ee59}' '\u{1ee5b}' '\u{1ee5d}' '\u{1ee5f}' '\u{1ee61}'-'\u{1ee62}' '\u{1ee64}' '\u{1ee67}'-'\u{1ee6a}' '\u{1ee6c}'-'\u{1ee72}' '\u{1ee74}'-'\u{1ee77}' '\u{1ee79}'-'\u{1ee7c}' '\u{1ee7e}' '\u{1ee80}'-'\u{1ee89}' '\u{1ee8b}'-'\u{1ee9b}' '\u{1eea1}'-'\u{1eea3}' '\u{1eea5}'-'\u{1eea9}' '\u{1eeab}'-'\u{1eebb}' '\u{1eef0}'-'\u{1eef1}' '\u{1f000}'-'\u{1f02b}' '\u{1f030}'-'\u{1f093}' '\u{1f0a0}'-'\u{1f0ae}' '\u{1f0b1}'-'\u{1f0bf}' '\u{1f0c1}'-'\u{1f0cf}' '\u{1f0d1}'-'\u{1f0f5}' '\u{1f100}'-'\u{1f1ad}' '\u{1f1e6}'-'\u{1f202}' '\u{1f210}'-'\u{1f23b}' '\u{1f240}'-'\u{1f248}' '\u{1f250}'-'\u{1f251}' '\u{1f260}'-'\u{1f265}' '\u{1f300}'-'\u{1f6d7}' '\u{1f6dc}'-'\u{1f6ec}' '\u{1f6f0}'-'\u{1f6fc}' '\u{1f700}'-'\u{1f776}' '\u{1f77b}'-'\u{1f7d9}' '\u{1f7e0}'-'\u{1f7eb}' '\u{1f7f0}' '\u{1f800}'-'\u{1f80b}' '\u{1f810}'-'\u{1f847}' '\u{1f850}'-'\u{1f859}' '\u{1f860}'-'\u{1f887}' '\u{1f890}'-'\u{1f8ad}' '\u{1f8b0}'-'\u{1f8b1}' '\u{1f900}'-'\u{1fa53}' '\u{1fa60}'-'\u{1fa6d}' '\u{1fa70}'-'\u{1fa7c}' '\u{1fa80}'-'\u{1fa88}' '\u{1fa90}'-'\u{1fabd}' '\u{1fabf}'-'\u{1fac5}' '\u{1face}'-'\u{1fadb}' '\u{1fae0}'-'\u{1fae8}' '\u{1faf0}'-'\u{1faf8}' '\u{1fb00}'-'\u{1fb92}' '\u{1fb94}'-'\u{1fbca}' '\u{1fbf0}'-'\u{1fbf9}' '\u{20000}'-'\u{2a6df}' '\u{2a700}'-'\u{2b739}' '\u{2b740}'-'\u{2b81d}' '\u{2b820}'-'\u{2cea1}' '\u{2ceb0}'-'\u{2ebe0}' '\u{2f800}'-'\u{2fa1d}' '\u{30000}'-'\u{3134a}' '\u{31350}'-'\u{323af}' '\u{e0001}' '\u{e0020}'-'\u{e007f}' '\u{e0100}'-'\u{e01ef}' ];
    let ws = [ ' ' '\t' '\n' '\r' ];
    let notBare = [ '"' '(' ')' '#' ':' '\\' ];
    let bare = $valid # $notBare;
    let tab_space = [ ' ' '\t' ];

    rule Init {
        $ws+ = Token::WhiteSpace,
        '#'+ $tab_space ( $valid $tab_space )+ = Token::Comment,
        "#nil" = Token::Nil,
        ":" = Token::Colon,

        $bare+ => |lexer| lexer.return_(Token::Bare(lexer.match_().to_owned())),
    },

}

#[cfg(test)]
mod test {
    use super::*;
    use lexgen_util::Loc;
    use regex::Regex;

    #[test]
    fn bare_exhaustive() {
        let mut buf = [0u8; 4];

        // Sanity check for category Co
        let co = Regex::new(r"^\p{Co}$").unwrap();
        let e000 = '\u{e000}'.encode_utf8(&mut buf);
        assert!(co.is_match(e000));

        // Atto bare allow categories L M N P S Cf except ( ) ^ " # : \.
        // Inverse of L M N P S Cf is: Z Cc Co Cs, but we can omit Cs
        // because Rust guarantees that strings don't contain surrogates.
        let rx = r#"[^\\\(\)\":#\pZ\p{Cc}\p{Co}]"#;
        let bare = Regex::new(rx).unwrap();

        // Some sanity checks of the regex
        assert!(bare.is_match("a"));
        assert!(bare.is_match("0"));
        assert!(bare.is_match("💩"));
        assert!(bare.is_match("'"));
        assert!(bare.is_match("\u{200d}")); // Zero Width Joiner;Cf
        assert!(!bare.is_match(" ")); // Zs
        assert!(!bare.is_match("\""));
        assert!(!bare.is_match(":"));
        assert!(!bare.is_match("\0")); // Cc
        assert!(!bare.is_match("\u{1680}")); // Ogham Space Mark;Zs
        assert!(!bare.is_match("\u{2028}")); // Line Separator;Zl
        assert!(!bare.is_match(e000)); // Co

        for c in '\0'..=char::MAX {
            let s = c.encode_utf8(&mut buf);
            let u = c as u32;
            assert_eq!(
                bare.is_match(s),
                matches!(Lexer::new(s).next(), Some(Ok((_, Token::Bare(_), _)))),
                "char \\u{{{u:02x}}}"
            );
        }
    }

    #[test]
    fn simple() {
        let mut lexer = Lexer::new("a*:");

        let result = lexer.next();
        println!("result: {result:?}");

        if let Some(Ok((Loc { line, col, .. }, token, _))) = result {
            assert!(matches!(token, Token::Bare(s) if s == "a*"));
            assert_eq!(line, 0);
            assert_eq!(col, 0);
        } else {
            unreachable!("not Some(Ok((Loc, Token, Loc)))");
        }

        let result = lexer.next();
        println!("result: {result:?}");

        if let Some(Ok((Loc { line, col, .. }, token, _))) = result {
            assert!(matches!(token, Token::Colon));
            assert_eq!(line, 0);
            assert_eq!(col, 2);
        } else {
            unreachable!("not Some(Ok((Loc, Token, Loc)))");
        }

        let result = lexer.next();
        println!("result: {result:?}");
        assert!(result.is_none());
    }
}
